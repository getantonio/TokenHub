const { ethers } = require("hardhat");

// This is the bytecode for a minimal OpenZeppelin-like ERC20 contract
// Name: Basic Token
// Symbol: BAS
// Decimals: 18
// Supply: 10000 tokens (sent to deployer)
const SIMPLEST_TOKEN_BYTECODE = "0x60806040523480156200001157600080fd5b506040518060400160405280600a81526020017f4261736963546f6b656e000000000000000000000000000000000000000000008152506040518060400160405280600381526020017f424153000000000000000000000000000000000000000000000000000000000081525060126000819055503362000097600a620000d560201b620003261760201c565b5062000190565b6001600160a01b0382166200011f5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640160405180910390fd5b80600260008282546200013391906200028c565b90915550506001600160a01b03821660009081526020819052604081208054839290620001629084906200028c565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b600081810190811067ffffffffffffffff8211171562000270577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b92915050565b600081151590506200028681620001a2565b92915050565b600082198211156200028c5762000287576200028c565b839182620002a3575b505050565b9392505050565b61085f80620002aa6000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80633950935111610071578063395093511461012357806370a082311461013657806395d89b411461015f578063a457c2d714610167578063a9059cbb1461017a578063dd62ed3e1461018d57600080fd5b806306fdde03146100ae578063095ea7b3146100cc57806318160ddd146100ef57806323b872dd14610101578063313ce56714610114575b600080fd5b6100b66101c6565b6040516100c39190610653565b60405180910390f35b6100df6100da36600461071a565b610258565b60405190151581526020016100c3565b6002545b6040519081526020016100c3565b6100df61010f366004610744565b610270565b604051601281526020016100c3565b6100df61013136600461071a565b610294565b6100f361014436600461078a565b6001600160a01b031660009081526020819052604090205490565b6100b66102d3565b6100df61017536600461071a565b6102e2565b6100df61018836600461071a565b61037b565b6100f361019b3660046107ac565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6060600380546101d5906107df565b80601f0160208091040260200160405190810160405280929190818152602001828054610201906107df565b801561024e5780601f106102235761010080835404028352916020019161024e565b820191906000526020600020905b81548152906001019060200180831161023157829003601f168201915b5050505050905090565b600033610266818585610389565b5060019392505050565b60003361027e8582856104ad565b61028985858561053a565b506001949350505050565b3360008181526001602090815260408083206001600160a01b038716845290915281205490919061026690829086906102ce9087906107f9565b610389565b6060600480546101d5906107df565b3360008181526001602090815260408083206001600160a01b0387168452909152812054909190838110156103695760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084015b60405180910390fd5b6103748286868403610389565b506001949350505050565b600033610266818585610539565b6001600160a01b0383166103eb5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610360565b6001600160a01b03821661044c5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610360565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b0383811660009081526001602090815260408083209386168352929052205460001981146105345781811015610527576040805162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000604482015290519081900360640190fd5b6105348484848403610389565b50505050565b6001600160a01b03831661059e5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610360565b6001600160a01b03821661060c5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610360565b6001600160a01b0383166000908152602081905260409020548181101561068a5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610360565b6001600160a01b03808516600090815260208190526040808220858503905591851681529081208054849290610661908490610811565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610627928252602082015260400190565b60006020808352835180602085015260005b818110156106805785810183015185820160400152602001610664565b5060006040828601015260407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8301168501019250505092915050565b80356001600160a01b038116811461071557600080fd5b919050565b6000806040838503121561072d57600080fd5b610736836106fe565b946020939093013593505050565b60008060006060848603121561075957600080fd5b610762846106fe565b9250610770602085016106fe565b9150604084013590509250925092565b8015158114610789575b600080fd5b50565b60006020828403121561079c57600080fd5b6107a5826106fe565b9392505050565b600080604083850312156107bf57600080fd5b6107c8836106fe565b91506107d6602084016106fe565b90509250929050565b600181811c908216806107f357607f821691505b602082108103610811573f73ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821115610811575b6000825260208201915b81811461080557845182559600190920191602001610781565b50505b505050565b808201808211156108235761082361082a565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fdfea2646970667358221220e9c8e49ec90e473471dc2e04ab1b3b8db1a6f5bbea7edd2f0d1e466cc6e5fcf164736f6c63430008160033";

async function main() {
  console.log("Deploying simplest ERC20 token on Polygon Amoy...");
  
  // Get signer
  const [deployer] = await ethers.getSigners();
  const deployerAddress = await deployer.getAddress();
  console.log("Deployer address:", deployerAddress);
  
  // Check network
  const network = await ethers.provider.getNetwork();
  console.log("Network:", network.name, "(Chain ID:", network.chainId, ")");
  
  // Deploy token with minimal bytecode
  console.log("Deploying with hardcoded parameters:");
  console.log("- Name: BasicToken");
  console.log("- Symbol: BAS");
  console.log("- Decimals: 18");
  console.log("- Initial Supply: 10000 BAS (to deployer)");
  
  // Create deployment transaction
  const tx = {
    from: deployerAddress,
    data: SIMPLEST_TOKEN_BYTECODE,
    gasLimit: 3000000
  };
  
  console.log("Sending deployment transaction...");
  try {
    const txResponse = await deployer.sendTransaction(tx);
    console.log("Deployment transaction sent:", txResponse.hash);
    
    console.log("Waiting for transaction confirmation...");
    const receipt = await txResponse.wait();
    console.log("Transaction confirmed in block:", receipt.blockNumber);
    
    const tokenAddress = receipt.contractAddress;
    console.log("✅ Token deployed successfully at address:", tokenAddress);
    console.log("Add to MetaMask with these details:");
    console.log("- Address:", tokenAddress);
    console.log("- Symbol: BAS");
    console.log("- Decimals: 18");
    
  } catch (error) {
    console.error("❌ Error deploying token:", error);
    if (error.error && error.error.message) {
      console.error("Error message:", error.error.message);
    }
    if (error.reason) {
      console.error("Reason:", error.reason);
    }
  }
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error("Unhandled error:", error);
    process.exit(1);
  }); 