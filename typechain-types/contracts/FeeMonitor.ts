/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace FeeMonitor {
  export type FeeTransactionStruct = {
    timestamp: BigNumberish;
    amount: BigNumberish;
    deployer: AddressLike;
  };

  export type FeeTransactionStructOutput = [
    timestamp: bigint,
    amount: bigint,
    deployer: string
  ] & { timestamp: bigint; amount: bigint; deployer: string };
}

export interface FeeMonitorInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "deployerFees"
      | "getAnalytics"
      | "recordFee"
      | "totalDeployments"
      | "totalFees"
      | "transactions"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "FeeCollected"): EventFragment;

  encodeFunctionData(
    functionFragment: "deployerFees",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAnalytics",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "recordFee",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalDeployments",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "totalFees", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transactions",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "deployerFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAnalytics",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "recordFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalDeployments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalFees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transactions",
    data: BytesLike
  ): Result;
}

export namespace FeeCollectedEvent {
  export type InputTuple = [
    deployer: AddressLike,
    amount: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    deployer: string,
    amount: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    deployer: string;
    amount: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface FeeMonitor extends BaseContract {
  connect(runner?: ContractRunner | null): FeeMonitor;
  waitForDeployment(): Promise<this>;

  interface: FeeMonitorInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  deployerFees: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  getAnalytics: TypedContractMethod<
    [],
    [
      [bigint, bigint, FeeMonitor.FeeTransactionStructOutput[]] & {
        _totalFees: bigint;
        _totalDeployments: bigint;
        _recentTransactions: FeeMonitor.FeeTransactionStructOutput[];
      }
    ],
    "view"
  >;

  recordFee: TypedContractMethod<
    [deployer: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  totalDeployments: TypedContractMethod<[], [bigint], "view">;

  totalFees: TypedContractMethod<[], [bigint], "view">;

  transactions: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, string] & {
        timestamp: bigint;
        amount: bigint;
        deployer: string;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "deployerFees"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getAnalytics"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, FeeMonitor.FeeTransactionStructOutput[]] & {
        _totalFees: bigint;
        _totalDeployments: bigint;
        _recentTransactions: FeeMonitor.FeeTransactionStructOutput[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "recordFee"
  ): TypedContractMethod<
    [deployer: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "totalDeployments"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalFees"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transactions"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, string] & {
        timestamp: bigint;
        amount: bigint;
        deployer: string;
      }
    ],
    "view"
  >;

  getEvent(
    key: "FeeCollected"
  ): TypedContractEvent<
    FeeCollectedEvent.InputTuple,
    FeeCollectedEvent.OutputTuple,
    FeeCollectedEvent.OutputObject
  >;

  filters: {
    "FeeCollected(address,uint256,uint256)": TypedContractEvent<
      FeeCollectedEvent.InputTuple,
      FeeCollectedEvent.OutputTuple,
      FeeCollectedEvent.OutputObject
    >;
    FeeCollected: TypedContractEvent<
      FeeCollectedEvent.InputTuple,
      FeeCollectedEvent.OutputTuple,
      FeeCollectedEvent.OutputObject
    >;
  };
}
