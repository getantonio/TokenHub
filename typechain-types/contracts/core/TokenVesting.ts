/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface TokenVestingInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "beneficiary"
      | "getVestingSchedule"
      | "owner"
      | "releasableAmount"
      | "release"
      | "renounceOwnership"
      | "revoke"
      | "setTotalAmount"
      | "token"
      | "transferOwnership"
      | "vestedAmount"
      | "vestingSchedule"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "OwnershipTransferred"
      | "TokensReleased"
      | "VestingRevoked"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "beneficiary",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVestingSchedule",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "releasableAmount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "release", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "revoke", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setTotalAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "vestedAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vestingSchedule",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "beneficiary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVestingSchedule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "releasableAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "release", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revoke", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setTotalAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vestedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vestingSchedule",
    data: BytesLike
  ): Result;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokensReleasedEvent {
  export type InputTuple = [amount: BigNumberish];
  export type OutputTuple = [amount: bigint];
  export interface OutputObject {
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VestingRevokedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TokenVesting extends BaseContract {
  connect(runner?: ContractRunner | null): TokenVesting;
  waitForDeployment(): Promise<this>;

  interface: TokenVestingInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  beneficiary: TypedContractMethod<[], [string], "view">;

  getVestingSchedule: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, bigint, boolean, boolean] & {
        total: bigint;
        released: bigint;
        start: bigint;
        cliff: bigint;
        end: bigint;
        isRevocable: boolean;
        isRevoked: boolean;
      }
    ],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  releasableAmount: TypedContractMethod<[], [bigint], "view">;

  release: TypedContractMethod<[], [void], "nonpayable">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  revoke: TypedContractMethod<[], [void], "nonpayable">;

  setTotalAmount: TypedContractMethod<
    [_amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  token: TypedContractMethod<[], [string], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  vestedAmount: TypedContractMethod<[], [bigint], "view">;

  vestingSchedule: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, bigint, boolean, boolean] & {
        totalAmount: bigint;
        startTime: bigint;
        cliffDuration: bigint;
        duration: bigint;
        releasedAmount: bigint;
        revocable: boolean;
        revoked: boolean;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "beneficiary"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getVestingSchedule"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, bigint, boolean, boolean] & {
        total: bigint;
        released: bigint;
        start: bigint;
        cliff: bigint;
        end: bigint;
        isRevocable: boolean;
        isRevoked: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "releasableAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "release"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revoke"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTotalAmount"
  ): TypedContractMethod<[_amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "token"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "vestedAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "vestingSchedule"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, bigint, boolean, boolean] & {
        totalAmount: bigint;
        startTime: bigint;
        cliffDuration: bigint;
        duration: bigint;
        releasedAmount: bigint;
        revocable: boolean;
        revoked: boolean;
      }
    ],
    "view"
  >;

  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "TokensReleased"
  ): TypedContractEvent<
    TokensReleasedEvent.InputTuple,
    TokensReleasedEvent.OutputTuple,
    TokensReleasedEvent.OutputObject
  >;
  getEvent(
    key: "VestingRevoked"
  ): TypedContractEvent<
    VestingRevokedEvent.InputTuple,
    VestingRevokedEvent.OutputTuple,
    VestingRevokedEvent.OutputObject
  >;

  filters: {
    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "TokensReleased(uint256)": TypedContractEvent<
      TokensReleasedEvent.InputTuple,
      TokensReleasedEvent.OutputTuple,
      TokensReleasedEvent.OutputObject
    >;
    TokensReleased: TypedContractEvent<
      TokensReleasedEvent.InputTuple,
      TokensReleasedEvent.OutputTuple,
      TokensReleasedEvent.OutputObject
    >;

    "VestingRevoked()": TypedContractEvent<
      VestingRevokedEvent.InputTuple,
      VestingRevokedEvent.OutputTuple,
      VestingRevokedEvent.OutputObject
    >;
    VestingRevoked: TypedContractEvent<
      VestingRevokedEvent.InputTuple,
      VestingRevokedEvent.OutputTuple,
      VestingRevokedEvent.OutputObject
    >;
  };
}
