/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace TokenFactory {
  export type TokenConfigStruct = {
    name: string;
    symbol: string;
    maxSupply: BigNumberish;
    initialSupply: BigNumberish;
    tokenPrice: BigNumberish;
    maxTransferAmount: BigNumberish;
    cooldownTime: BigNumberish;
    transfersEnabled: boolean;
    antiBot: boolean;
    teamVestingDuration: BigNumberish;
    teamVestingCliff: BigNumberish;
    teamAllocation: BigNumberish;
    teamWallet: AddressLike;
    marketingAllocation: BigNumberish;
    marketingWallet: AddressLike;
    developerAllocation: BigNumberish;
    developerWallet: AddressLike;
  };

  export type TokenConfigStructOutput = [
    name: string,
    symbol: string,
    maxSupply: bigint,
    initialSupply: bigint,
    tokenPrice: bigint,
    maxTransferAmount: bigint,
    cooldownTime: bigint,
    transfersEnabled: boolean,
    antiBot: boolean,
    teamVestingDuration: bigint,
    teamVestingCliff: bigint,
    teamAllocation: bigint,
    teamWallet: string,
    marketingAllocation: bigint,
    marketingWallet: string,
    developerAllocation: bigint,
    developerWallet: string
  ] & {
    name: string;
    symbol: string;
    maxSupply: bigint;
    initialSupply: bigint;
    tokenPrice: bigint;
    maxTransferAmount: bigint;
    cooldownTime: bigint;
    transfersEnabled: boolean;
    antiBot: boolean;
    teamVestingDuration: bigint;
    teamVestingCliff: bigint;
    teamAllocation: bigint;
    teamWallet: string;
    marketingAllocation: bigint;
    marketingWallet: string;
    developerAllocation: bigint;
    developerWallet: string;
  };
}

export interface TokenFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "TARGET_USD_FEE"
      | "createToken"
      | "creationFee"
      | "discountedFees"
      | "getCreationFee"
      | "owner"
      | "platformTeamAllocation"
      | "platformTeamWallet"
      | "renounceOwnership"
      | "setDiscountedFee"
      | "setPlatformTeamAllocation"
      | "setPlatformTeamWallet"
      | "transferOwnership"
      | "updateCreationFee"
      | "updateFeeFromEthPrice"
      | "withdrawFees"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CreationFeeUpdated"
      | "DiscountSet"
      | "OwnershipTransferred"
      | "PlatformTeamAllocationUpdated"
      | "PlatformTeamWalletUpdated"
      | "TokenCreated"
      | "VestingScheduleCreated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "TARGET_USD_FEE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createToken",
    values: [TokenFactory.TokenConfigStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "creationFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "discountedFees",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getCreationFee",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "platformTeamAllocation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "platformTeamWallet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setDiscountedFee",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPlatformTeamAllocation",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPlatformTeamWallet",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateCreationFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateFeeFromEthPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFees",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "TARGET_USD_FEE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "discountedFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCreationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "platformTeamAllocation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "platformTeamWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDiscountedFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPlatformTeamAllocation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPlatformTeamWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCreationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateFeeFromEthPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFees",
    data: BytesLike
  ): Result;
}

export namespace CreationFeeUpdatedEvent {
  export type InputTuple = [newFee: BigNumberish];
  export type OutputTuple = [newFee: bigint];
  export interface OutputObject {
    newFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DiscountSetEvent {
  export type InputTuple = [user: AddressLike, discountedFee: BigNumberish];
  export type OutputTuple = [user: string, discountedFee: bigint];
  export interface OutputObject {
    user: string;
    discountedFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PlatformTeamAllocationUpdatedEvent {
  export type InputTuple = [newAllocation: BigNumberish];
  export type OutputTuple = [newAllocation: bigint];
  export interface OutputObject {
    newAllocation: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PlatformTeamWalletUpdatedEvent {
  export type InputTuple = [newWallet: AddressLike];
  export type OutputTuple = [newWallet: string];
  export interface OutputObject {
    newWallet: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenCreatedEvent {
  export type InputTuple = [
    tokenAddress: AddressLike,
    name: string,
    symbol: string
  ];
  export type OutputTuple = [
    tokenAddress: string,
    name: string,
    symbol: string
  ];
  export interface OutputObject {
    tokenAddress: string;
    name: string;
    symbol: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VestingScheduleCreatedEvent {
  export type InputTuple = [
    tokenAddress: AddressLike,
    vestingContract: AddressLike,
    beneficiary: AddressLike
  ];
  export type OutputTuple = [
    tokenAddress: string,
    vestingContract: string,
    beneficiary: string
  ];
  export interface OutputObject {
    tokenAddress: string;
    vestingContract: string;
    beneficiary: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TokenFactory extends BaseContract {
  connect(runner?: ContractRunner | null): TokenFactory;
  waitForDeployment(): Promise<this>;

  interface: TokenFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  TARGET_USD_FEE: TypedContractMethod<[], [bigint], "view">;

  createToken: TypedContractMethod<
    [config: TokenFactory.TokenConfigStruct],
    [void],
    "payable"
  >;

  creationFee: TypedContractMethod<[], [bigint], "view">;

  discountedFees: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  getCreationFee: TypedContractMethod<[user: AddressLike], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  platformTeamAllocation: TypedContractMethod<[], [bigint], "view">;

  platformTeamWallet: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setDiscountedFee: TypedContractMethod<
    [user: AddressLike, discountedFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  setPlatformTeamAllocation: TypedContractMethod<
    [_allocation: BigNumberish],
    [void],
    "nonpayable"
  >;

  setPlatformTeamWallet: TypedContractMethod<
    [_wallet: AddressLike],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateCreationFee: TypedContractMethod<
    [_newFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateFeeFromEthPrice: TypedContractMethod<
    [_ethPriceInUsd: BigNumberish],
    [void],
    "nonpayable"
  >;

  withdrawFees: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "TARGET_USD_FEE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "createToken"
  ): TypedContractMethod<
    [config: TokenFactory.TokenConfigStruct],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "creationFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "discountedFees"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getCreationFee"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "platformTeamAllocation"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "platformTeamWallet"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setDiscountedFee"
  ): TypedContractMethod<
    [user: AddressLike, discountedFee: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setPlatformTeamAllocation"
  ): TypedContractMethod<[_allocation: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPlatformTeamWallet"
  ): TypedContractMethod<[_wallet: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateCreationFee"
  ): TypedContractMethod<[_newFee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateFeeFromEthPrice"
  ): TypedContractMethod<[_ethPriceInUsd: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawFees"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "CreationFeeUpdated"
  ): TypedContractEvent<
    CreationFeeUpdatedEvent.InputTuple,
    CreationFeeUpdatedEvent.OutputTuple,
    CreationFeeUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "DiscountSet"
  ): TypedContractEvent<
    DiscountSetEvent.InputTuple,
    DiscountSetEvent.OutputTuple,
    DiscountSetEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PlatformTeamAllocationUpdated"
  ): TypedContractEvent<
    PlatformTeamAllocationUpdatedEvent.InputTuple,
    PlatformTeamAllocationUpdatedEvent.OutputTuple,
    PlatformTeamAllocationUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "PlatformTeamWalletUpdated"
  ): TypedContractEvent<
    PlatformTeamWalletUpdatedEvent.InputTuple,
    PlatformTeamWalletUpdatedEvent.OutputTuple,
    PlatformTeamWalletUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "TokenCreated"
  ): TypedContractEvent<
    TokenCreatedEvent.InputTuple,
    TokenCreatedEvent.OutputTuple,
    TokenCreatedEvent.OutputObject
  >;
  getEvent(
    key: "VestingScheduleCreated"
  ): TypedContractEvent<
    VestingScheduleCreatedEvent.InputTuple,
    VestingScheduleCreatedEvent.OutputTuple,
    VestingScheduleCreatedEvent.OutputObject
  >;

  filters: {
    "CreationFeeUpdated(uint256)": TypedContractEvent<
      CreationFeeUpdatedEvent.InputTuple,
      CreationFeeUpdatedEvent.OutputTuple,
      CreationFeeUpdatedEvent.OutputObject
    >;
    CreationFeeUpdated: TypedContractEvent<
      CreationFeeUpdatedEvent.InputTuple,
      CreationFeeUpdatedEvent.OutputTuple,
      CreationFeeUpdatedEvent.OutputObject
    >;

    "DiscountSet(address,uint256)": TypedContractEvent<
      DiscountSetEvent.InputTuple,
      DiscountSetEvent.OutputTuple,
      DiscountSetEvent.OutputObject
    >;
    DiscountSet: TypedContractEvent<
      DiscountSetEvent.InputTuple,
      DiscountSetEvent.OutputTuple,
      DiscountSetEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PlatformTeamAllocationUpdated(uint256)": TypedContractEvent<
      PlatformTeamAllocationUpdatedEvent.InputTuple,
      PlatformTeamAllocationUpdatedEvent.OutputTuple,
      PlatformTeamAllocationUpdatedEvent.OutputObject
    >;
    PlatformTeamAllocationUpdated: TypedContractEvent<
      PlatformTeamAllocationUpdatedEvent.InputTuple,
      PlatformTeamAllocationUpdatedEvent.OutputTuple,
      PlatformTeamAllocationUpdatedEvent.OutputObject
    >;

    "PlatformTeamWalletUpdated(address)": TypedContractEvent<
      PlatformTeamWalletUpdatedEvent.InputTuple,
      PlatformTeamWalletUpdatedEvent.OutputTuple,
      PlatformTeamWalletUpdatedEvent.OutputObject
    >;
    PlatformTeamWalletUpdated: TypedContractEvent<
      PlatformTeamWalletUpdatedEvent.InputTuple,
      PlatformTeamWalletUpdatedEvent.OutputTuple,
      PlatformTeamWalletUpdatedEvent.OutputObject
    >;

    "TokenCreated(address,string,string)": TypedContractEvent<
      TokenCreatedEvent.InputTuple,
      TokenCreatedEvent.OutputTuple,
      TokenCreatedEvent.OutputObject
    >;
    TokenCreated: TypedContractEvent<
      TokenCreatedEvent.InputTuple,
      TokenCreatedEvent.OutputTuple,
      TokenCreatedEvent.OutputObject
    >;

    "VestingScheduleCreated(address,address,address)": TypedContractEvent<
      VestingScheduleCreatedEvent.InputTuple,
      VestingScheduleCreatedEvent.OutputTuple,
      VestingScheduleCreatedEvent.OutputObject
    >;
    VestingScheduleCreated: TypedContractEvent<
      VestingScheduleCreatedEvent.InputTuple,
      VestingScheduleCreatedEvent.OutputTuple,
      VestingScheduleCreatedEvent.OutputObject
    >;
  };
}
